{
  // 关闭自动更新
  "extensions.autoUpdate": false,
  "remote.SSH.remotePlatform": {
    "develop": "linux"
  },
  // 编辑器设置
  // 界面主题
  "workbench.colorTheme": "X Dark",
  //  设置vim不同模式下状态栏的颜色
  // "workbench.colorCustomizations": {
  //   "activityBar.activeBackground": "#2f7c47",
  //   "activityBar.background": "#2f7c47",
  //   "activityBar.foreground": "#e7e7e7",
  //   "activityBar.inactiveForeground": "#e7e7e799",
  //   "activityBarBadge.background": "#422c74",
  //   "activityBarBadge.foreground": "#e7e7e7",
  //   "commandCenter.border": "#e7e7e799",
  //   "sash.hoverBorder": "#2f7c47",
  //   "statusBar.background": "#B48EAD",
  //   "statusBar.foreground": "#434C5E",
  //   "statusBarItem.hoverBackground": "#2f7c47",
  //   "statusBarItem.remoteBackground": "#215732",
  //   "statusBarItem.remoteForeground": "#e7e7e7",
  //   "titleBar.activeBackground": "#215732",
  //   "titleBar.activeForeground": "#e7e7e7",
  //   "titleBar.inactiveBackground": "#21573299",
  //   "titleBar.inactiveForeground": "#e7e7e799",
  //   "statusBar.noFolderBackground": "#B48EAD",
  //   "statusBar.debuggingBackground": "#B48EAD",
  //   "statusBar.debuggingForeground": "#434C5E"
  // },
  "workbench.colorCustomizations": {
    "statusBar.background": "#BF616A",
    "statusBar.noFolderBackground": "#BF616A",
    "statusBar.debuggingBackground": "#BF616A",
    "statusBar.foreground": "#e7e7e7",
    "statusBar.debuggingForeground": "#e7e7e7"
  },
  // 根据当前模式更改状态栏的颜色
  "vim.statusBarColorControl": false,
  "vim.statusBarColors.normal": [
    "#215732",
    "#e7e7e7"
  ],
  "vim.statusBarColors.insert": "#BF616A",
  "vim.statusBarColors.visual": "#B48EAD",
  "vim.statusBarColors.visualline": "#B48EAD",
  "vim.statusBarColors.visualblock": "#A3BE8C",
  "vim.statusBarColors.replace": "#D08770",
  "vim.statusBarColors.commandlineinprogress": "#007ACC",
  "vim.statusBarColors.searchinprogressmode": "#007ACC",
  "vim.statusBarColors.easymotionmode": "#007ACC",
  "vim.statusBarColors.easymotioninputmode": "#007ACC",
  "vim.statusBarColors.surroundinputmode": "#007ACC",
  "vscode_vibrancy.opacity": 0.3,
  "vscode_vibrancy.theme": "Dark (Only Subbar)",
  // 是否要确认是否信任新打开的文件
  "security.workspace.trust.untrustedFiles": "open",
  // 编辑器设置在保存时自动格式化
  "editor.formatOnSave": false,
  // 不要弹出确认拖放
  "explorer.confirmDragAndDrop": false,
  // 不要弹出确认删除
  "explorer.confirmDelete": false,
  // 在顶部显示代码嵌套第一行
  "editor.stickyScroll.enabled": true,
  // 开启编辑器的连字符设置
  "editor.fontLigatures": true,
  // 开始的编辑器
  "workbench.startupEditor": "none",
  // 忽略空格的修改
  "diffEditor.ignoreTrimWhitespace": false,
  // 关闭单击预览
  "workbench.editor.enablePreview": false,
  // 滚轮缩放
  "editor.mouseWheelZoom": true,
  // 关闭显卡加速
  "terminal.integrated.gpuAcceleration": "off",
  // png文件的默认打开方式
  "workbench.editorAssociations": {
    "*.png": "cweijan.officeViewer",
    "*.jpeg": "default",
    "*.jpg": "hexEditor.hexedit",
    "*.md": "vscode.markdown.preview.editor"
  },
  // 图标主题
  "workbench.iconTheme": "material-icon-theme",
  // html括号自动修改
  "editor.linkedEditing": true,
  // 文件自动保存
  "files.autoSave": "afterDelay",
  // 文件大小显示在下方的右侧
  "filesize.displayInfoOnTheRightSideOfStatusBar": true,
  // 是否显示视图头部
  "workbench.view.alwaysShowHeaderActions": true,
  // 跨编辑器保存设置
  "workbench.editor.sharedViewState": true,
  // 缩略图宽度
  "editor.minimap.maxColumn": 80,
  // 侧边栏位置
  "workbench.sideBar.location": "right",
  "workbench.list.automaticKeyboardNavigation": false,
  // 默认打开终端
  "terminal.integrated.defaultProfile.linux": "zsh",
  // 打开文件时猜测编码集
  "files.autoGuessEncoding": true,
  // 设置相对行号
  "editor.lineNumbers": "relative",
  // 制表符长度
  "editor.tabSize": 2,
  // #关闭自动传参建议和代码补全建议，使用按键手动触发（可选
  "editor.parameterHints.enabled": false,
  "editor.quickSuggestions": {
    "comments": "on",
    "strings": "on",
    "other": "on"
  },
  // 光标的动画效果
  "editor.cursorBlinking": "smooth",
  "editor.cursorSmoothCaretAnimation": "on",
  // 关闭编辑器的自动检测缩进设置
  "editor.detectIndentation": false,
  // 在某些情况下隐藏光标
  "editor.hideCursorInOverviewRuler": true,
  // 以下三行是为了隐藏滚动栏
  // "editor.scrollbar.horizontal": "hidden",
  "editor.scrollbar.vertical": "hidden",
  "editor.scrollbar.verticalScrollbarSize": 0,
  // 设置缩进显示为线条模式
  "indentRainbow.indicatorStyle": "light",
  "indentRainbow.colors": [
    "rgba(255,255,64,0.3)",
    "rgba(127,255,127,0.3)",
    "rgba(255,127,255,0.3)",
    "rgba(79,236,236,0.3)"
  ],
  // git设置
  // 智能提交
  "git.enableSmartCommit": true,
  // git 不要弹窗确认是否同意 sync
  "git.confirmSync": false,
  // 关闭旧版git警告
  "git.ignoreLegacyWarning": true,
  "git.followTagsWhenSync": true,
  "git.rebaseWhenSync": true,
  "git.defaultCloneDirectory": "",
  "gitlens.advanced.messages": {
    "suppressGitVersionWarning": true
  },
  "git.autofetch": true,
  // c/c++设置
  // 默认c++标准
  "C_Cpp.default.cppStandard": "c++11",
  // 默认c标准
  "C_Cpp.default.cStandard": "c11",
  // 默认cmake可执行程序
  "cmake.cmakePath": "cmake3",
  // 关闭C/C++插件的自动补全功能
  "C_Cpp.intelliSenseEngine": "disabled",
  // clangd配置
  "clangd.path": "c:\\Users\\Administrator\\AppData\\Roaming\\Code\\User\\globalStorage\\llvm-vs-code-extensions.vscode-clangd\\install\\15.0.6\\clangd_15.0.6\\bin\\clangd.exe",
  "clangd.arguments": [
    "-pretty",
    "--clang-tidy",
    "-j=12",
    "--header-insertion=never",
    "--all-scopes-completion",
    "--completion-style=detailed",
    "--pch-storage=memory",
    "--query-driver=C:\\Program Files\\mingw-w64\\mingw64\\bin\\g++.exe",
    "--background-index",
    "--pch-storage=disk",
    "--log=error",
    "--compile-commands-dir=${workspaceFolder}/build",
    "--compile-commands-dir=${workspaceFolder}/build_debug"
  ],
  "clangd.detectExtensionConflicts": false,
  "clangd.checkUpdates": true,
  // 自动生成注释
  // 头部注释
  "fileheader.customMade": {
    // Author字段是文件的创建者 可以在specialOptions中更改特殊属性
    // 公司项目和个人项目可以配置不同的用户名与邮箱 搜索: gitconfig includeIf  比如: https://ayase.moe/2021/03/09/customized-git-config/
    // 自动提取当前git config中的: 用户名、邮箱
    "Author": "git config user.name && git config user.email", // 同时获取用户名与邮箱
    // "Author": "git config user.name", // 仅获取用户名
    // "Author": "git config user.email", // 仅获取邮箱
    // "Author": "OBKoro1", // 写死的固定值 不从git config中获取
    "Date": "Do not edit", // 文件创建时间(不变)
    // LastEditors、LastEditTime、FilePath将会自动更新 如果觉得时间更新的太频繁可以使用throttleTime(默认为1分钟)配置更改更新时间。
    "LastEditors": "git config user.name && git config user.email", // 文件最后编辑者 与Author字段一致
    // 由于编辑文件就会变更最后编辑时间，多人协作中合并的时候会导致merge
    // 可以将时间颗粒度改为周、或者月，这样冲突就减少很多。搜索变更时间格式: dateFormat
    "LastEditTime": "Do not edit", // 文件最后编辑时间
    // 输出相对路径，类似: /文件夹名称/src/index.js
    "FilePath": "Do not edit", // 文件在项目中的相对路径 自动更新
    // 插件会自动将光标移动到Description选项中 方便输入 Description字段可以在specialOptions更改
    "Description": "", // 介绍文件的作用、文件的入参、出参。
    // custom_string_obkoro1~custom_string_obkoro100都可以输出自定义信息
    // 可以设置多条自定义信息 设置个性签名、留下QQ、微信联系方式、输入空行等
    "custom_string_obkoro1": "",
    // 版权声明 保留文件所有权利 自动替换年份 获取git配置的用户名和邮箱
    // 版权声明获取git配置, 与Author字段一致: ${git_name} ${git_email} ${git_name_email}
    "custom_string_obkoro1_copyright": "Copyright (c) ${now_year} YView     Corporation All Rights Reserved. "
    //  "custom_string_obkoro1_copyright": "
    /****************************************************************************************
 * 文 件 名 : ${fileName}
 * 项目名称 :
 * 模 块 名 :
 * 功    能 :
 * 操作系统 : LINUX
 * 修改记录 : 无
 * 版    本 : Rev 0.1.0
 *- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 编码: wuby         2018/12/27
 修改: wuby       2020/01/08
 *- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * 公司介绍及版权说明
 *
 *           (C)Copyright 2020 YView    Corporation All Rights Reserved.
 *- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 *****************************************************************************************/
    //
    // "custom_string_obkoro1_copyright": "Copyright (c) ${now_year} by 写死的公司名/用户名, All Rights Reserved. "
  },
  // 函数注释
  "fileheader.cursorMode": {
    "description": "", // 函数注释生成之后，光标移动到这里
    "param": "", // param 开启函数参数自动提取 需要将光标放在函数行或者函数上方的空白行
    "return": ""
  },
  // 插件配置项
  "fileheader.configObj": {
    "autoAdd": false, // 检测文件没有头部注释，自动添加文件头部注释
    "autoAddLine": 100, // 文件超过多少行数 不再自动添加头部注释
    "autoAlready": true, // 只添加插件支持的语言以及用户通过`language`选项自定义的注释
    "supportAutoLanguage": [], // 设置之后，在数组内的文件才支持自动添加
    // 自动添加头部注释黑名单
    "prohibitAutoAdd": [
      "json"
    ],
    "prohibitItemAutoAdd": [
      "项目的全称禁止项目自动添加头部注释, 使用快捷键自行添加"
    ],
    "folderBlacklist": [
      "node_modules"
    ], // 文件夹或文件名禁止自动添加头部注释
    "wideSame": false, // 头部注释等宽设置
    "wideNum": 13, // 头部注释字段长度 默认为13
    "functionWideNum": 0, // 函数注释等宽设置 设为0 即为关闭
    // 头部注释第几行插入
    "headInsertLine": {
      "php": 2 // php文件 插入到第二行
    },
    "beforeAnnotation": {}, // 头部注释之前插入内容
    "afterAnnotation": {}, // 头部注释之后插入内容
    "specialOptions": {}, // 特殊字段自定义 比如: Author、LastEditTime、LastEditors、FilePath、Description、Date等
    "switch": {
      "newlineAddAnnotation": true // 默认遇到换行符(\r\n \n \r)添加注释符号
    },
    "moveCursor": true, // 自动移动光标到Description所在行
    "dateFormat": "YYYY-MM-DD HH:mm:ss",
    "atSymbol": [
      "@",
      "@"
    ], // 更改所有文件的自定义注释中的@符号
    "atSymbolObj": {}, //  更改单独语言/文件的@
    "colon": [
      ": ",
      ": "
    ], // 更改所有文件的注释冒号
    "colonObj": {}, //  更改单独语言/文件的冒号
    "filePathColon": "路径分隔符替换", // 默认值： mac: / window是: \
    "showErrorMessage": false, // 是否显示插件错误通知 用于debugger
    "writeLog": false, // 错误日志生成
    "CheckFileChange": false, // 单个文件保存时进行diff检查
    "createHeader": false, // 新建文件自动添加头部注释
    "useWorker": false, // 是否使用工作区设置
    "designAddHead": false, // 添加注释图案时添加头部注释
    "headDesignName": "random", // 图案注释使用哪个图案
    "headDesign": false, // 是否使用图案注释替换头部注释
    // 自定义配置是否在函数内生成注释 不同文件类型和语言类型
    "cursorModeInternalAll": {}, // 默认为false 在函数外生成函数注释
    "openFunctionParamsCheck": true, // 开启关闭自动提取添加函数参数
    "functionParamsShape": [
      "{",
      "}"
    ], // 函数参数外形自定义
    // "functionParamsShape": "no type" 函数参数不需要类型
    "functionBlankSpaceAll": {}, // 函数注释空格缩进 默认为空对象 默认值为0 不缩进
    "functionTypeSymbol": "*", // 参数没有类型时的默认值
    "typeParamOrder": "type param", // 参数类型 和 参数的位置自定义
    "NoMatchParams": "no show param", // 没匹配到函数参数，是否显示@param与@return这两行 默认不显示param
    "functionParamAddStr": "", // 在 type param 后面增加字符串 可能是冒号，方便输入参数描述
    // 自定义语言注释，自定义取消 head、end 部分
    // 不设置自定义配置language无效 默认都有head、end
    "customHasHeadEnd": {}, // "cancel head and function" | "cancel head" | "cancel function"
    "throttleTime": 60000, // 对同一个文件 需要过1分钟再次修改文件并保存才会更新注释
    // 自定义语言注释符号，覆盖插件的注释格式
    "language": {
      // js后缀文件
      "js": {
        "head": "/$$",
        "middle": " $ @",
        "end": " $/",
        // 函数自定义注释符号：如果有此配置 会默认使用
        "functionSymbol": {
          "head": "/******* ", // 统一增加几个*号
          "middle": " * @",
          "end": " */"
        },
        "functionParams": "typescript" // 函数注释使用ts语言的解析逻辑
      },
      // 一次匹配多种文件后缀文件 不用重复设置
      "h/hpp/cpp": {
        "head": "/*** ", // 统一增加几个*号
        "middle": " * @",
        "end": " */"
      },
      // 针对有特殊要求的文件如：test.blade.php
      "blade.php": {
        "head": "<!--",
        "middle": " * @",
        "end": "-->"
      }
    },
    // 默认注释  没有匹配到注释符号的时候使用。
    "annotationStr": {
      "head": "/*",
      "middle": " * @",
      "end": " */",
      "use": false
    }
  },
  // cmake设置
  // 自动对打开的项目配置cmake
  "cmake.configureOnOpen": false,
  // vim配置
  // 绑定vim前导键
  "vim.leader": "<space>",
  // 启用easymotion插件
  "vim.easymotion": true,
  // vim 的 easymotion 插件的高亮字符的前景色
  "vim.easymotionMarkerForegroundColorOneChar": "#DF5452",
  // 开启 vim-surround
  "vim.surround": true,
  // 开启<s>+char+char跳转
  "vim.sneak": true,
  "vim.highlightedyank.enable": true,
  // 启用系统粘贴板作为vim寄存器
  "vim.useSystemClipboard": true,
  // 由vim接管ctrl+any的按键，而不是vscode
  "vim.useCtrlKeys": true,
  // 突出显示与当前搜索匹配的所有文本
  "vim.hlsearch": true,
  // 自动切换输入法
  "vim.autoSwitchInputMethod.enable": true,
  "vim.autoSwitchInputMethod.defaultIM": "1033",
  "vim.autoSwitchInputMethod.obtainIMCmd": "C:\\im-select.exe",
  "vim.autoSwitchInputMethod.switchIMCmd": "C:\\im-select.exe {im}",
  // 当输入一个搜索字符时，显示下一个匹配的结果
  "vim.incsearch": true,
  // 下面定义的按键将交由vscode进行处理，而不是vscode-vim插件
  "vim.handleKeys": {
    "<C-a>": false,
    "<C-n>": false,
    "<C-c>": false,
    "<C-x>": false
  },
  // 普通模式下的非递归按键绑定
  "vim.normalModeKeyBindings": [
    // whichkey
    {
      "before": [
        "<leader>",
        "<leader>",
        "<leader>"
      ],
      "commands": [
        "whichkey.show"
      ]
    },
    {
      "before": [
        "{"
      ],
      "after": [
        "w"
      ]
    },
    {
      // 移動到行首
      "before": [
        "H"
      ],
      "after": [
        "^"
      ]
    },
    // 保存
    {
      "before": [
        "<leader>",
        "s"
      ],
      "commands": [
        ":w!"
      ]
    },
    // 退出
    {
      "before": [
        "<leader>",
        "q"
      ],
      "commands": [
        ":q!"
      ]
    },
    // 保存+退出
    {
      "before": [
        "<leader>",
        "sq"
      ],
      "commands": [
        ":wq!"
      ]
    },
    // tab翻頁
    {
      "before": [
        "<tab>"
      ],
      "commands": [
        "workbench.action.nextEditor"
      ]
    },
    // 顯示vscode命令=>CTRL+shift+P
    {
      "before": [
        "<leader>",
        "g",
        "c"
      ],
      "commands": [
        "workbench.action.showCommands"
      ]
    },
    // 右移到行尾
    {
      "before": [
        "L"
      ],
      "after": [
        "$"
      ]
    },
    // 摺叠代碼塊
    {
      "before": [
        "z",
        "z"
      ],
      "commands": [
        "editor.toggleFold"
      ]
    },
    // 跳轉到上一個問題
    {
      "before": [
        "g",
        "["
      ],
      "commands": [
        "editor.action.marker.prevInFiles"
      ]
    },
    // 跳轉到下一個問題
    {
      "before": [
        "g",
        "]"
      ],
      "commands": [
        "editor.action.marker.nextInFiles"
      ]
    },
    // gj gk下移不展開代碼塊
    {
      "before": [
        "j"
      ],
      "after": [
        "g",
        "j"
      ]
    },
    // 上移不展開代碼塊
    {
      "before": [
        "k"
      ],
      "after": [
        "g",
        "k"
      ]
    },
    // 刪除一整行
    {
      "before": [
        "<leader>",
        "d"
      ],
      "after": [
        "d",
        "d"
      ]
    },
    {
      "before": [
        "<C-n>"
      ],
      "commands": [
        ":nohl"
      ]
    },
    // 向下新增一行
    {
      "before": [
        "K"
      ],
      "commands": [
        "lineBreakInsert"
      ],
      "silent": true
    },
    // 侧边栏的显示和隐藏的快捷键
    {
      "before": [
        "leader",
        "b"
      ],
      "commands": [
        {
          "command": "workbench.action.toggleSidebarVisibility"
        }
      ]
    },
    // 在左侧的文件管理器中打开当前文件
    {
      "before": [
        "leader",
        "f"
      ],
      "commands": [
        {
          "command": "actions.find"
        }
      ]
    }, // 在左侧的文件管理器中打开当前文件
    {
      "before": [
        "leader",
        "w"
      ],
      "commands": [
        {
          "command": "workbench.action.closeActiveEditor"
        }
      ]
    },
    // 显示和隐藏左侧的活动栏
    {
      "before": [
        "leader",
        "a"
      ],
      "commands": [
        {
          "command": "workbench.action.toggleActivityBarVisibility"
        }
      ]
    },
    // 显示和隐藏底部的状态栏
    {
      "before": [
        "leader",
        "j"
      ],
      "commands": [
        {
          "command": "workbench.action.togglePanel"
        }
      ]
    },
    // 这个和 Ctrl + P 效果是等同的，即，快速搜索打开文件
    {
      "before": [
        "leader",
        "e"
      ],
      "commands": [
        {
          "command": "workbench.action.quickOpen"
        }
      ]
    },
    // 显示编译器悬停
    {
      "before": [
        "leader",
        "i"
      ],
      "commands": [
        {
          "command": "editor.action.showHover",
          "when": "editorTextFocus"
        }
      ]
    },
    // 行切换成小写
    {
      "before": [
        "g",
        "u"
      ],
      "commands": [
        {
          "command": "editor.action.transformToLowercase"
        }
      ]
    },
    // 行切换成大写
    {
      "before": [
        "g",
        "U"
      ],
      "commands": [
        {
          "command": "editor.action.transformToUppercase"
        }
      ]
    },
    {
      "before": [
        "<leader>",
        "m"
      ],
      "commands": [
        "bookmarks.toggle"
      ]
    },
    {
      "before": [
        "<leader>",
        "<leader>",
        "b"
      ],
      "commands": [
        "bookmarks.list"
      ]
    },
    {
      "before": [
        "<leader>",
        "t"
      ],
      "commands": [
        {
          "command": "extension.翻译选中文本"
        }
        // "when": "editorTextFocus
      ]
    }
  ],
  // vim 在 normal 模式下非递归的键位绑定
  "vim.normalModeKeyBindingsNonRecursive": [
    // 将 u 和 VSCode 自身的撤销动作绑定
    {
      "before": [
        "u"
      ],
      "commands": [
        "undo"
      ]
    },
    // 将 Ctrl + r 和 VSCode 自身的重做动作绑定
    {
      "before": [
        "C-r"
      ],
      "commands": [
        "redo"
      ]
    },
    // 单个字母切换大小写
    {
      "before": [
        "<Leader>",
        "u"
      ],
      "after": [
        "~"
      ]
    },
    {
      // 向右侧跳转 利用的 easymotion
      "before": [
        "<Leader>",
        "l"
      ],
      "after": [
        "<leader>",
        "<leader>",
        "l"
      ]
    },
    {
      // 向左侧跳转 利用的 easymotion
      "before": [
        "<Leader>",
        "h"
      ],
      "after": [
        "<leader>",
        "<leader>",
        "h"
      ]
    },
    {
      // 基于行的向上跳转 利用的 easymotion
      "before": [
        "<Leader>",
        "k"
      ],
      "after": [
        "<leader>",
        "<leader>",
        "k"
      ]
    },
    {
      // 基于行的向下跳转 利用的 easymotion
      "before": [
        "<Leader>",
        "j"
      ],
      "after": [
        "<leader>",
        "<leader>",
        "j"
      ]
    },
    {
      // 基于单词的跳转 单词首 全局向下 基于 easymotion
      "before": [
        "<Leader>",
        "w"
      ],
      "after": [
        "<leader>",
        "<leader>",
        "w"
      ]
    },
    {
      // 基于单词的跳转 单词尾 全局向下 基于 easymotion
      "before": [
        "<Leader>",
        "e"
      ],
      "after": [
        "<leader>",
        "<leader>",
        "e"
      ]
    },
    {
      // 基于单词的跳转 单词首 全局向上 基于 easymotion
      "before": [
        "<Leader>",
        "b"
      ],
      "after": [
        "<leader>",
        "<leader>",
        "b"
      ]
    },
    {
      // 基于单词的跳转 单词尾 全局向上 基于 easymotion
      "before": [
        "<Leader>",
        "g",
        "e"
      ],
      "after": [
        "<leader>",
        "<leader>",
        "g",
        "e"
      ]
    },
    // 删除一个函数
    {
      "before": [
        "<space>",
        "d",
        "j"
      ],
      "commands": [
        "delete-function.deleteFunction"
      ]
    },
    {
      // 创建一个函数 光标需要在要创建的函数上
      "before": [
        "<Leader>",
        "c",
        "f"
      ],
      "commands": [
        "hocusPocus.createFunction"
      ]
    },
    {
      // 创建一个变量 光标需要在要创建的函数上
      "before": [
        "<Leader>",
        "c",
        "v"
      ],
      "commands": [
        "hocusPocus.createVariable"
      ]
    },
    {
      // 重构手法： 提取变量
      "before": [
        "<Leader>",
        "r",
        "v"
      ],
      "commands": [
        "abracadabra.extract"
      ]
    },
    {
      "before": [
        "<Leader>",
        "g",
        "g"
      ],
      "commands": [
        "workbench.view.scm"
      ]
    }
  ],
  // 插入模式下的非递归按键绑定
  "vim.insertModeKeyBindings": [
    // 退出到normal模式
    {
      "before": [
        "j",
        "k"
      ],
      "after": [
        "<Esc>"
      ]
    }
  ],
  // 命令模式下的非递归按键绑定
  "vim.commandLineModeKeyBindingsNonRecursive": [],
  // 可视模式下的非递归按键绑定
  "vim.operatorPendingModeKeyBindings": [],
  "vim.visualModeKeyBindingsNonRecursive": [
    // 向右侧跳转 利用的 easymotion
    {
      "before": [
        "<Leader>",
        "l"
      ],
      "after": [
        "<leader>",
        "<leader>",
        "l"
      ]
    },
    {
      "before": [
        "{"
      ],
      "after": [
        "w"
      ]
    },
    // 向左侧跳转 利用的 easymotion
    {
      "before": [
        "<Leader>",
        "h"
      ],
      "after": [
        "<leader>",
        "<leader>",
        "h"
      ]
    },
    // 基于行的向上跳转 利用的 easymotion
    {
      "before": [
        "<Leader>",
        "k"
      ],
      "after": [
        "<leader>",
        "<leader>",
        "k"
      ]
    },
    // 基于行的向下跳转 利用的 easymotion
    {
      "before": [
        "<Leader>",
        "j"
      ],
      "after": [
        "<leader>",
        "<leader>",
        "j"
      ]
    },
    // 基于2个字符的全局跳转 基于 easymotion
    {
      "before": [
        "s"
      ],
      "after": [
        "<leader>",
        "<leader>",
        "2",
        "s"
      ]
    },
    // 基于单词的跳转 单词首 全局向下 基于 easymotion
    {
      "before": [
        "<Leader>",
        "w"
      ],
      "after": [
        "<leader>",
        "<leader>",
        "w"
      ]
    },
    {
      // 基于单词的跳转 单词尾 全局向下 基于 easymotion
      "before": [
        "<Leader>",
        "e"
      ],
      "after": [
        "<leader>",
        "<leader>",
        "e"
      ]
    },
    // 基于单词的跳转 单词首 全局向上 基于 easymotion
    {
      "before": [
        "<Leader>",
        "b"
      ],
      "after": [
        "<leader>",
        "<leader>",
        "b"
      ]
    },
    // 基于单词的跳转 单词尾 全局向上 基于 easymotion
    {
      "before": [
        "<Leader>",
        "g",
        "e"
      ],
      "after": [
        "<leader>",
        "<leader>",
        "g",
        "e"
      ]
    }
  ],
  // vim 的 visual 模式下的键位绑定
  "vim.visualModeKeyBindings": [
    // 向右缩进，可以重复使用
    {
      "before": [
        ">"
      ],
      "commands": [
        "editor.action.indentLines"
      ]
    },
    // 向左缩进，可以重复使用
    {
      "before": [
        "<"
      ],
      "commands": [
        "editor.action.outdentLines"
      ]
    },
    // whichkey
    {
      "before": [
        "<leader>",
        "<leader>",
        "<leader>"
      ],
      "commands": [
        "whichkey.show"
      ]
    },
    {
      "before": [
        "leader",
        "f"
      ],
      "commands": [
        {
          "command": "actions.find"
        }
      ]
    },
    {
      "before": [
        "<C-f>"
      ],
      "commands": [
        {
          "command": "actions.find"
        }
      ]
    },
  ],
  // markdown预览模式设置
  "markdown.preview.scrollEditorWithPreview": false,
  "[jsonc]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "[c]": {
    "editor.defaultFormatter": "xaver.clang-format"
  },
  // 自动生成cpp类定义、声明
  "CppHelper.SourcePattern": [
    "{FILE}.cpp",
    "{FILE}.c",
    "{FILE}.inl",
    "/src/{FILE}.cpp"
  ],
  // js和ts设置
  "typescript.locale": "zh-CN",
  "typescript.suggest.paths": false,
  "javascript.suggest.paths": false,
  // 插件设置
  // 本地历史保留天数
  "local-history.daysLimit": 5,
  "local-history.exclude": [
    "**/build/** ",
    "**/.history/**",
    "**/.vscode/**",
    "**/node_modules/**",
    "**/typings/**",
    "**/out/**",
    "**/Code/User/**"
  ],
  "vscode-office.openOutline": true,
  "vscode-office.editorLanguage": "zh_CN",
  "vscode-drawio.debug": true,
  "partialDiff.preComparisonTextNormalizationRules": [],
  "cSpell.userWords": [
    "autogen",
    "automake",
    "CDMA",
    "cflags",
    "clangd",
    "cweijan",
    "devel",
    "ldconfig",
    "libprotobuf",
    "libprotoc",
    "libprotocbuf",
    "lprotobuf",
    "malloc",
    "MIANBEI",
    "mkdirs",
    "Msisdn",
    "nproc",
    "pkgconfig",
    "proto",
    "protobuf",
    "protoc",
    "sfixed",
    "sint",
    "stdlib",
    "struct",
    "tabnine",
    "USERCARD",
    "Varints",
    "Vartins",
    "wuby",
    "Wxcs",
    "yumi"
  ],
  "projectManager.tags": [
    "Personal",
    "Work",
    "Learning",
    "Sdx",
    "Depend",
    "gch",
    "zj"
  ],
  "hexeditor.columnWidth": 16,
  "hexeditor.showDecodedText": true,
  "hexeditor.defaultEndianness": "little",
  "hexeditor.inspectorType": "aside",
  "indentRainbow.includedLanguages": [],
  // whichkey设置
  "whichkey.bindings": [
    //code runner
    {
      "key": "r",
      "name": "+RunCoder",
      "type": "binding",
      "binding": [
        {
          "key": "r",
          "name": "Run Coder",
          "type": "command",
          "command": "code-runner.run"
        },
        {
          "key": "s",
          "name": "Stop",
          "type": "command",
          "command": "code-runner.stop"
        }
      ]
    },
    // gitlens
    {
      "key": "g",
      "name": "+Git",
      "type": "binding",
      "binding": [
        {
          "key": "b",
          "name": "checkout",
          "type": "command",
          "command": "git.checkout"
        },
        {
          "key": "c",
          "name": "Changes",
          "type": "command",
          "command": "git.openChange"
        },
        {
          "key": "d",
          "name": "Diff with",
          "type": "command",
          "command": "git.diffwithRevision"
        },
        {
          "key": "D",
          "name": "Diff with working tree",
          "type": "command",
          "command": "git.diffWithWorking"
        },
        {
          "key": "i",
          "name": "init",
          "type": "command",
          "command": "git.init"
        },
        {
          "key": "m",
          "name": "merge",
          "type": "command",
          "command": "git.merge"
        },
        {
          "key": "s",
          "name": "Status",
          "type": "command",
          "command": "workbench.view.scm"
        },
        {
          "key": "S",
          "name": "Stage",
          "type": "command",
          "command": "git.stag"
        },
        {
          "key": "U",
          "name": "UStage",
          "type": "command",
          "command": "git.ustage"
        },
        {
          "key": "j",
          "name": "Next change",
          "type": "command",
          "command": "workbench.action.editor.nextChange"
        },
        {
          "key": "k",
          "name": "last change",
          "type": "command",
          "command": "workbench.action.editor.previousChange"
        },
        {
          "key": "f",
          "name": "File history",
          "type": "command",
          "command": "gitlens.showQuickFileHistory"
        },
        {
          "key": "g",
          "name": "open commit graph",
          "type": "command",
          "command": "gitlens.showGraphPage"
        }
      ]
    },
    {
      "key": " ",
      "name": "Commands",
      "type": "command",
      "command": "workbench.action.showCommands"
    },
  ],
  "[cpp]": {
    "editor.defaultFormatter": "xaver.clang-format"
  },
  "todo-tree.general.statusBar": "current file",
  "clang-tidy.buildPath": "build;build_release;build_debug",
  "editor.maxTokenizationLineLength": 200000,
  "editor.unicodeHighlight.invisibleCharacters": false,
  "editor.unicodeHighlight.ambiguousCharacters": false,
  "lldb.suppressUpdateNotifications": true,
  "clang-format.assumeFilename": "/root/clang-format/.clang-format",
  "explorer.openEditors.visible": 40,
  "explorer.openEditors.sortOrder": "alphabetical",
  "git.ignoreRebaseWarning": true,
  "editor.unicodeHighlight.allowedCharacters": {
    "": true
  },
  // "workbench.editor.showTabs": false,
}